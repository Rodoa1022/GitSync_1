{"Name":"Move Email To Folder","Description":"Searches for emails in the source folder, then moves emails matching the search criteria to the target folder. Requires: IMAP configuration","Script":"from EmailActions import EmailIMAPAction\nfrom SiemplifyUtils import output_handler, utc_now\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED, EXECUTION_STATE_TIMEDOUT\n\n\nclass MoveEmailToFolderAction(EmailIMAPAction):\n    \"\"\"\n    Searches for emails in the source folder, then moves emails matching the search criteria to the target folder.\n    All Email mailbox manipulations are done via IMAP.\n    \"\"\"\n    SCRIPT_NAME = \"EmailV2 - Move Email To Folder\"\n\n    def __init__(self):\n        \"\"\"Override of the constructor to pass script name\"\"\"\n        super(MoveEmailToFolderAction, self).__init__(MoveEmailToFolderAction.SCRIPT_NAME)\n\n    # noinspection PyAttributeOutsideInit\n    def load_action_configuration(self):\n        \"\"\"\n        Overriding action configuration loading\n        \"\"\"\n        folders_string = self._get_action_param(param_name=\"Source Folder Name\",\n                                                is_mandatory=True)\n        self.folders = [f.strip() for f in folders_string.split(\",\") if f.strip()] if folders_string else []\n\n        message_ids_string = self._get_action_param(param_name=\"Message IDs\")\n        self.message_ids = [m.strip() for m in message_ids_string.split(\",\") if m.strip()] if message_ids_string else []\n\n        self.destination_folder = self._get_action_param(param_name=\"Destination Folder Name\",\n                                                         is_mandatory=True)\n        self.subject = self._get_action_param(param_name=\"Subject Filter\")\n        self.unread = self._get_action_param(param_name=\"Only Unread\",\n                                             input_type=bool,\n                                             default_value=False)\n\n        if not self.message_ids and not self.subject:\n            raise AttributeError(\"Both Message IDs and Subject Filter can't be empty\")\n\n    # noinspection PyUnusedLocal\n    def execute_action(self, output_messages, successful_entities, failed_entities):\n        \"\"\"\n        Override of execution step. Searches for emails to move per each mailbox and moves them.\n        :param output_messages: {list} Mutable list of output messages (str) to form audit trail for this action\n        :param successful_entities: {list} N/A in case of SearchEmail. List of entity.identifier's, which have been processed successfully\n        :param failed_entities: {list} N/A in case of SearchEmail. List of entity.identifier's, which have been failed during processing\n        :return: {tuple} 1st value - Status of the operation: {int} 0 - success, 1 - failed, 2 - timed out; 2nd value - Success flag: {bool} True - success, False - failure.\n        \"\"\"\n        email_list = []\n        for folder, email_uid in self.search_emails(\n                folders=self.folders,\n                message_ids=self.message_ids,\n                subject=self.subject,\n                only_unread=self.unread):\n            try:\n                self.logger.info(\"Moving email_uid={0} from {1} to {2} folder\".format(\n                    email_uid, folder, self.destination_folder))\n                self.email_imap_manager.move_mail(\n                    email_uid=email_uid,\n                    source_folder=folder,\n                    target_folder=self.destination_folder)\n                self.logger.info(\"Successfully moved email\")\n                email_list.append(email_uid)\n            except Exception as e:\n                self.logger.error(\"Unable to move email_uid={0} from {1} to {2} folder\".format(\n                    email_uid, folder, self.destination_folder))\n                self.logger.exception(e)\n\n        message = \"No mails were found matching the search criteria!\"\n        if email_list:\n            message = \"{0} mails were successfully moved from {1} to {2}\".format(\n                len(email_list),\n                \", \".join(self.folders),\n                self.destination_folder\n            )\n\n        output_messages.append(message)\n        self.logger.info(message)\n        return EXECUTION_STATE_COMPLETED, True\n\n\n@output_handler\ndef main():\n    action = MoveEmailToFolderAction()\n    action.run()\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"EmailV2","ScriptResultName":"is_success","DynamicResultsMetadata":null,"Creator":"admin","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":1.0,"TimeoutSeconds":600,"IsAsync":null,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"Inbox","Description":"Mailbox folder to search email in. Parameter should also accept comma separated list of folders to check the user response in multiple folders.","Name":"Source Folder Name","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"","Description":"Destination folder to move emails to","Name":"Destination Folder Name","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Filter condition, specify emails with which email ids to find. Should accept comma separated multiple message ids. If message id is provided, subject filter is ignored.","Name":"Message IDs","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Filter condition, specify what subject to search for emails","Name":"Subject Filter","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"False","Description":"Filter condition, specify if search should look only for unread emails","Name":"Only Unread","Value":null,"Type":1,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":null,"PythonVersion":"None","SimulationData":{"Entities":[]},"SimulationDataJson":"{\"Entities\": []}"}