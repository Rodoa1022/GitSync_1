{"Name":"DownloadEmailAttachments","Description":"Download email attachments from email to specific file path on Siemplify server. Requires: IMAP configuration","Script":"from EmailActions import EmailIMAPAction\nfrom EmailFileManager import save_attachment_to_local_path\nfrom SiemplifyUtils import output_handler, utc_now\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED, EXECUTION_STATE_TIMEDOUT\nimport os\n\n\nclass DownloadEmailAttachmentsAction(EmailIMAPAction):\n    \"\"\"\n    Searches for emails in the mailbox, downloads attachments from them into a dedicated folder.\n    All Email mailbox manipulations are done via IMAP.\n    \"\"\"\n\n    SCRIPT_NAME = \"EmailV2 - Download Attachments\"\n    MAX_FILE_OUTPUT = 20\n\n    def __init__(self):\n        \"\"\"\n        Overriding common constructor\n        \"\"\"\n        super(DownloadEmailAttachmentsAction, self).__init__(DownloadEmailAttachmentsAction.SCRIPT_NAME)\n\n        if not os.path.exists(self.download_path):\n            os.makedirs(self.download_path)\n\n    # noinspection PyAttributeOutsideInit\n    def load_action_configuration(self):\n        \"\"\"\n        Overriding action configuration loading\n        \"\"\"\n        folders_string = self._get_action_param(param_name=\"Folder Name\",\n                                                is_mandatory=True)\n        self.folders = [f.strip() for f in folders_string.split(\",\") if f.strip()] if folders_string else []\n\n        message_ids_string = self._get_action_param(param_name=\"Message IDs\")\n        self.message_ids = [m.strip() for m in message_ids_string.split(\",\") if m.strip()] if message_ids_string else []\n\n        self.download_path = self._get_action_param(param_name=\"Download Path\",\n                                                    is_mandatory=True)\n        self.subject = self._get_action_param(param_name=\"Subject Filter\")\n\n    # noinspection PyUnusedLocal\n    def execute_action(self, output_messages, successful_entities, failed_entities):\n        \"\"\"\n        Override of execution step. Searches for emails and downloads their attachments to disk.\n        :param output_messages: {list} Mutable list of output messages (str) to form audit trail for this action\n        :param successful_entities: {list} N/A in case of SearchEmail. List of entity.identifier's, which have been processed successfully\n        :param failed_entities: {list} N/A in case of SearchEmail. List of entity.identifier's, which have been failed during processing\n        :return: {tuple} 1st value - Status of the operation: {int} 0 - success, 1 - failed, 2 - timed out; 2nd value - Output value: {str} comma-separated list of downloaded attachments paths\n        \"\"\"\n        attachments_local_paths = []\n        for folder, email_uid in self.search_emails(\n                folders=self.folders,\n                message_ids=self.message_ids,\n                subject=self.subject):\n            try:\n                self.logger.info(\"Fetching email with email_uid={0} in folder={1}\".format(\n                    email_uid, folder))\n                email = self.email_imap_manager.get_message_data_by_message_id(\n                    email_uid=email_uid,\n                    folder_name=folder,\n                    mark_as_read=True)\n                if not email:\n                    self.logger.info(\"No emails were found for email_uid={0} in folder={1}\".format(\n                        email_uid, folder))\n                    continue\n                self.logger.info(\"Fetched email successfully with email_uid={0} and message_id={1}\".format(\n                    email_uid, email.message_id))\n\n                email_path = os.path.join(self.download_path, email.get_trimmed_message_id())\n\n                for attachment in email.attachments:\n                    try:\n                        # Save to given path\n                        attachment_abs_path = save_attachment_to_local_path(\n                            path=email_path,\n                            attachment_name=attachment.file_name,\n                            attachment_content=attachment.file_contents)\n                        attachments_local_paths.append(attachment_abs_path)\n                        self.logger.info(\"Saved email attachment {0} to the folder {1} for email_uid={2}\".format(\n                            attachment.file_name, self.download_path, email_uid))\n                    except Exception as e:\n                        self.logger.error(\"Unable to save attachment={0} from email_uid={1} to local_path={2}\".format(\n                            attachment.file_name, email_uid, self.download_path))\n                        self.logger.exception(e)\n            except Exception as e:\n                self.logger.error(\"Unable to save attachments for email_uid={0} from folder={1}\".format(\n                    email_uid, folder))\n                self.logger.exception(e)\n\n        message = \"No attachments found to download!\"\n        if attachments_local_paths:\n            message = \"Downloaded {0} attachments.\\n\\nTop-{1} Files:\\n{2}\".format(\n                len(attachments_local_paths),\n                self.MAX_FILE_OUTPUT,\n                \"\\n\".join(attachments_local_paths[:self.MAX_FILE_OUTPUT]))\n\n        result_value = \",\".join(attachments_local_paths)\n\n        output_messages.append(message)\n        self.logger.info(message)\n        return EXECUTION_STATE_COMPLETED, result_value\n\n\n@output_handler\ndef main():\n    action = DownloadEmailAttachmentsAction()\n    action.run()\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"EmailV2","ScriptResultName":"is_success","DynamicResultsMetadata":null,"Creator":"Admin","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":1.0,"TimeoutSeconds":600,"IsAsync":null,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"Inbox","Description":"Mailbox folder to search email in. Parameter should also accept comma separated list of folders to check the user response in multiple folders","Name":"Folder Name","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"","Description":"File path on the server where to download the email attachments","Name":"Download Path","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Filter condition, specify emails with which email ids to find. Should accept comma separated multiple message ids. If message id is provided, subject filter is ignored","Name":"Message IDs","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Filter condition to search emails by specific subject","Name":"Subject Filter","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":null,"PythonVersion":"None","SimulationData":{"Entities":[]},"SimulationDataJson":"{\"Entities\": []}"}