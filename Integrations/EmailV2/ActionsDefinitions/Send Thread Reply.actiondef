{"Name":"Send Thread Reply","Description":"Send a message as a reply to the email thread.","Script":"from SiemplifyUtils import output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\nfrom EmailSMTPManager import EmailSMTPManager\nfrom EmailActions import EmailIMAPAction\nfrom EmailCommon import load_attachments_to_dict\n\n\nclass SendThreadReplyAction(EmailIMAPAction):\n    \"\"\"\n    This class should be used for execution of flow related to SendThreadReply action\n    SendThreadReply should get original email by message id and send thread reply to it\n    SMTP server\n    \"\"\"\n    SCRIPT_NAME = \"EmailV2 - Send Thread Reply\"\n\n    def __init__(self):\n        \"\"\"\n        SendThreadReplyAction constructor. Loads integration configuration and initializes EmailManager instance\n        \"\"\"\n        super(SendThreadReplyAction, self).__init__(SendThreadReplyAction.SCRIPT_NAME)\n        error_message = \"SMTP configuration is needed to execute action. Please configure SMTP on \" \\\n                        \"integration configuration page in Marketplace.\"\n        self.validate_configuration(self.smtp_host, self.smtp_port, error_message)\n\n        # Instantiate EmailSMTPManager\n        self.email_smtp_manager = EmailSMTPManager(self.from_address)\n\n        # And Login to it\n        self.email_smtp_manager.login_smtp(\n            host=self.smtp_host,\n            port=self.smtp_port,\n            username=self.username,\n            password=self.password,\n            use_ssl=self.smtp_use_ssl,\n            use_auth=self.smtp_use_auth)\n\n    def load_action_configuration(self):\n        \"\"\"\n        Method should load configuration, specific to the SendThreadReply Action\n        \"\"\"\n        self.message_id = self._get_action_param(param_name=\"Message ID\", is_mandatory=True, print_value=True)\n        folders_string = self._get_action_param(param_name=\"Folder Name\", is_mandatory=True, default_value=\"Inbox\")\n        self.folders = [f.strip() for f in folders_string.split(\",\") if f.strip()] if folders_string else []\n        self.body = self._get_action_param(param_name=\"Content\", is_mandatory=True)\n        attachment_paths_list = self._get_action_param(param_name=\"Attachment Paths\", is_mandatory=False,\n                                                       print_value=True)\n        self.reply_all = self._get_action_param(param_name=\"Reply All\", input_type=bool, print_value=True)\n        reply_to_string = self._get_action_param(param_name=\"Reply To\", print_value=True)\n        self.reply_to = [item.strip() for item in reply_to_string.split(\",\") if item.strip()] if reply_to_string else []\n\n        if attachment_paths_list:\n            self.attachment_paths = [a.strip() for a in attachment_paths_list.split(\",\") if a.strip()]\n        else:\n            self.attachment_paths = []\n\n    def execute_action(self, output_messages, successful_entities, failed_entities):\n        \"\"\"\n        Get original email by message id and send thread reply to it\n        :param output_messages: {list} Mutable list of output messages\n        :param successful_entities: {list} N/A in case of SendThreadReply\n        :param failed_entities: {list} N/A in case of SendThreadReply\n        :return: {tuple} status, result_value\n        \"\"\"\n        # Create a dict with all required attachments to the email\n        attachments_dict = load_attachments_to_dict(siemplify_logger=self.logger, attachment_paths=self.attachment_paths)\n        original_message = None\n        result_value = True\n        status = EXECUTION_STATE_COMPLETED\n\n        # Reply to first found email\n        try:\n            for folder, email_uid in self.search_emails(folders=self.folders, message_ids=[self.message_id]):\n                self.logger.info(f\"Fetching email data with email_uid={email_uid} in folder={folder}\")\n                original_message = self.email_imap_manager.get_message_data_by_message_id(\n                    email_uid=email_uid,\n                    folder_name=folder\n                )\n\n                if not original_message:\n                    self.logger.info(f\"No emails were found for email_uid={email_uid} in folder={folder}\")\n                    continue\n\n                break\n\n            if original_message:\n                if self.reply_all:\n                    addresses = list(set(original_message.recipients + original_message.senders + original_message.cc))\n\n                    if self.from_address in addresses:\n                        addresses.remove(self.from_address)\n\n                    if not addresses:\n                        raise Exception(\"if you want to send a reply only to your own email address, you need to work \"\n                                        \"with \\\"Reply To\\\" parameter.\")\n                elif self.reply_to:\n                    addresses = self.reply_to\n                else:\n                    addresses = original_message.senders\n\n                msg_id = self.email_smtp_manager.send_mail_html_embedded_photos(\n                    html_body=self.body,\n                    subject=original_message.subject,\n                    to_addresses=\",\".join(addresses),\n                    original_message=original_message,\n                    display_sender_name=self.display_sender_name,\n                    attachments=attachments_dict\n                )\n\n                json_result = {\n                    \"message_id\": msg_id,\n                    \"recipients\": \",\".join(addresses)\n                }\n                self.siemplify.result.add_result_json(json_result)\n\n                output_messages.append(f\"Successfully sent reply to the message with ID {self.message_id}.\")\n\n            else:\n                result_value = False\n                output_messages.append(f\"Message with ID {self.message_id} was not found\")\n\n        except Exception as e:\n            self.logger.error(f\"General error performing action {SendThreadReplyAction.SCRIPT_NAME}\")\n            self.logger.exception(e)\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            output_messages.append(f\"Error executing action \\\"Send Thread Reply\\\". Reason: {e}\")\n\n        return status, result_value\n\n\n@output_handler\ndef main():\n    action = SendThreadReplyAction()\n    action.run()\n\n\nif __name__ == \"__main__\":\n    main()\n\n","IntegrationIdentifier":"EmailV2","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"message_id\":\"<162556278608.14165.480701790xxxxxxxxxx@siemplify>\",\"recipients\":\"test@example.com\"}","ShowResult":true}],"Creator":"admin","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":1.0,"TimeoutSeconds":600,"IsAsync":null,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"","Description":"Specify the ID of the message to which you want to send a reply.","Name":"Message ID","Value":"","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"Inbox","Description":"Specify a comma-separated list of mailbox folders in which action should search for email. Note: you can set mail-specific folders, for example, \"[Gmail]/All Mail\" to search in all of the folders of Gmail mailbox. Additionally, folder name should match exactly the IMAP folder. If folder contains spaces, folder must be wrapped in double quotes.","Name":"Folder Name","Value":"","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"","Description":"Specify the content of the reply.","Name":"Content","Value":"","Type":10,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Specify a comma separated list of attachments file paths stored on the server for addition to the email.","Name":"Attachment Paths","Value":"","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"true","Description":"If enabled, action will send a reply to all recipients related to the original email. Note: this parameter has priority over \"Reply To\" parameter.","Name":"Reply All","Value":"true","Type":1,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Specify a comma-separated list of emails to which you want to send this reply. If nothing is provided and \"Reply All\" is disabled, action will only send a reply to the sender of the email. If \"Reply All\" is enabled, action will ignore this parameter.","Name":"Reply To","Value":"","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":null,"PythonVersion":"None","SimulationData":{"Entities":[]},"SimulationDataJson":"{\"Entities\": []}"}