{"Name":"Ping","Description":"Test Connectivity. Requires: IMAP or SMTP configuration","Script":"from SiemplifyDataModel import EntityTypes\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\nfrom EmailSMTPManager import EmailSMTPManager\nfrom EmailIMAPManager import EmailIMAPManager\nfrom EmailActions import BaseEmailAction\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\n\nclass PingAction(BaseEmailAction):\n    \"\"\"\n    Class wrapping all logic for PingAction.\n    System uses it when you click Test in Integration configurations.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Class constructor. Comparing to other BaseEmailAction ancestors,\n        it doesn't login to SMTP and IMAP immediately. Instead this is done within run() method.\n        \"\"\"\n        super(PingAction, self).__init__(\"EmailV2 - Ping\")\n\n        # Instantiate EmailSMTPManager & EmailIMAPManager\n        self.email_smtp_manager = EmailSMTPManager(self.from_address)\n        self.email_imap_manager = EmailIMAPManager(\n            mail_address=self.from_address,\n            logger=self.logger,\n            environment=None,\n        )\n\n    # noinspection PyAttributeOutsideInit\n    def load_integration_configuration(self):\n        \"\"\"\n        Protected method, which should load whole Email integration configuration.\n        I'm calling same method of the superclass to avoid copy paste of basic params initiation.\n        :return:\n        \"\"\"\n        super(PingAction, self).load_integration_configuration()\n\n        self.imap_host = self._get_integration_param(\n            param_name='IMAP Server Address',\n            default_value='Not yet configured')\n        # noinspection PyTypeChecker\n        self.imap_port = self._get_integration_param(\n            param_name='IMAP Port',\n            default_value='Not yet configured')\n        # noinspection PyTypeChecker\n        self.imap_use_ssl = self._get_integration_param(\n            param_name='IMAP USE SSL',\n            input_type=bool,\n            default_value=True)\n\n    def load_action_configuration(self):\n        \"\"\"\n        No specific action configurations.\n        \"\"\"\n        pass\n\n    def run(self):\n        \"\"\"\n        Try to connect to SMTP and IMAP to test integration configuration.\n        \"\"\"\n        # And Login to them\n        smtp_configured = True\n        imap_configured = True\n        result = True\n        status = EXECUTION_STATE_COMPLETED\n\n        try:\n            self.validate_configuration(self.smtp_host, self.smtp_port)\n        except:\n            smtp_configured = False\n\n        try:\n            self.validate_configuration(self.imap_host, self.imap_port)\n        except:\n            imap_configured = False\n\n        smtp_configured_message = ' SMTP ' if smtp_configured else ''\n        imap_configured_message = ' IMAP ' if imap_configured else ''\n\n        try:\n            if smtp_configured:\n                self.email_smtp_manager.login_smtp(\n                    host=self.smtp_host,\n                    port=self.smtp_port,\n                    username=self.username,\n                    password=self.password,\n                    use_ssl=self.smtp_use_ssl,\n                    use_auth=self.smtp_use_auth)\n\n            if imap_configured:\n                self.email_imap_manager.login_imap(\n                    host=self.imap_host,\n                    port=self.imap_port,\n                    username=self.username,\n                    password=self.password,\n                    use_ssl=self.imap_use_ssl)\n\n            output_message = \"Connected successfully with{}{}\".format(smtp_configured_message,\n                                                                          imap_configured_message)\n        except Exception as e:\n            result = False\n            status = EXECUTION_STATE_FAILED\n            output_message = \"Failed to connect! Error is {}\".format(e)\n            self.siemplify.LOGGER.error(output_message)\n            self.siemplify.LOGGER.exception(e)\n\n\n        if not smtp_configured and not imap_configured:\n            result = False\n            status = EXECUTION_STATE_FAILED\n            output_message = \"SMTP (or IMAP) configuration is needed to execute action. Please configure STMP (or \" \\\n                             \"IMAP) on integration configuration page in Marketplace. \"\n\n        self.siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n        self.siemplify.LOGGER.info(\"Output Message: {}\".format(output_message))\n        self.siemplify.LOGGER.info(\"Result: {}\".format(result))\n        self.siemplify.LOGGER.info(\"Status: {}\".format(status))\n\n        self.siemplify.end(output_message, result, status)\n\n\n@output_handler\ndef main():\n    action = PingAction()\n    action.run()\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"EmailV2","ScriptResultName":"is_succeed","DynamicResultsMetadata":null,"Creator":"admin","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":1.0,"TimeoutSeconds":600,"IsAsync":null,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[],"DefaultResultValue":null,"PythonVersion":"None","SimulationData":{"Entities":[]},"SimulationDataJson":"{\"Entities\": []}"}