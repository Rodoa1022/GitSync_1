{"Name":"Delete Email","Description":"Delete one or multiple email from the mailbox that matches search criteria. Delete can be done for the first email that matched the search criteria, or it can be done for all matching emails. Requires: IMAP configuration","Script":"from datetime import timedelta\n\nfrom EmailActions import EmailIMAPAction\nfrom EmailCommon import build_json_result_from_emails_list\n\nfrom ScriptResult import EXECUTION_STATE_COMPLETED\nfrom SiemplifyUtils import output_handler, utc_now\n\n\nclass DeleteEmailAction(EmailIMAPAction):\n    \"\"\"\n    Searches for emails in the mailbox, then deleted emails matching the search criteria.\n    All Email mailbox manipulations are done via IMAP.\n    \"\"\"\n\n    SCRIPT_NAME = \"EmailV2 - Delete Email\"\n\n    def __init__(self):\n        super(DeleteEmailAction, self).__init__(DeleteEmailAction.SCRIPT_NAME)\n\n    # noinspection PyAttributeOutsideInit\n    def load_action_configuration(self):\n        \"\"\"\n        Overriding action configuration loading\n        \"\"\"\n        folders_string = self._get_action_param(param_name=\"Folder Name\",\n                                                is_mandatory=True)\n        self.folders = [f.strip() for f in folders_string.split(\",\") if f.strip()] if folders_string else []\n\n        message_ids_string = self._get_action_param(param_name=\"Message IDs\")\n        self.message_ids = [m.strip() for m in message_ids_string.split(\",\") if m.strip()] if message_ids_string else []\n\n        self.subject = self._get_action_param(param_name=\"Subject Filter\")\n        self.sender = self._get_action_param(param_name=\"Sender Filter\")\n        self.recipient = self._get_action_param(param_name=\"Recipient Filter\")\n        self.delete_all = self._get_action_param(param_name=\"Delete All Matching Emails\",\n                                                 input_type=bool,\n                                                 default_value=False)\n        self.days_back = self._get_action_param(param_name=\"Days Back\", input_type=int, default_value=None, is_mandatory=False)\n\n        if not self.message_ids and (not self.subject and not self.sender and not self.recipient):\n            raise AttributeError(\"Message IDs and Subject, Sender and Recipient filters can't be empty at the same time\")\n\n    # noinspection PyUnusedLocal\n    def execute_action(self, output_messages, successful_entities, failed_entities):\n        \"\"\"\n        Override of execution step. Searches for emails to delete per each mailbox and deletes them.\n        :param output_messages: {list} Mutable list of output messages (str) to form audit trail for this action\n        :param successful_entities: {list} N/A in case of SearchEmail. List of entity.identifier's, which have been processed successfully\n        :param failed_entities: {list} N/A in case of SearchEmail. List of entity.identifier's, which have been failed during processing\n        :return: {tuple} 1st value - Status of the operation: {int} 0 - success, 1 - failed, 2 - timed out; 2nd value - Success flag: {bool} True - success, False - failure.\n        \"\"\"\n        email_list = []\n        time_filter = None\n\n        if isinstance(self.days_back, int):\n            if self.days_back < 0:\n                raise Exception(\"\\\"Days Back\\\" parameter must be non negative.\")\n            time_filter = utc_now() - timedelta(days=self.days_back)\n\n        for folder, email_uid in self.search_emails(\n                folders=self.folders,\n                message_ids=self.message_ids,\n                time_filter=time_filter,\n                subject=self.subject,\n                sender=self.sender,\n                recipient=self.recipient):\n            try:\n                self.logger.info(\"Fetching email with email_uid={0} in folder={1}\".format(\n                    email_uid, folder))\n                # We retrieve email contents and delete it at the same time\n                email = self.email_imap_manager.get_message_data_by_message_id(\n                    email_uid=email_uid,\n                    folder_name=folder)\n\n                if not email:\n                    self.logger.info(\"No emails were found for email_uid={0} in folder={1}\".format(\n                        email_uid, folder))\n                    continue\n                self.logger.info(\"Fetched email successfully with email_uid={0} and message_id={1}\".format(\n                    email_uid, email.message_id))\n                email_list.append((folder, email))\n            except Exception as e:\n                self.logger.error(\"Unable to retrieve email with email_uid={0} from folder={1}\".format(\n                    email_uid, folder))\n                self.logger.exception(e)\n\n        if not self.delete_all and email_list:\n            email_list = email_list[:1]\n            self.logger.info(\"Will delete just first email with email_uid={0} and message_id={1}\".format(\n                email_list[0][1].email_uid, email_list[0][1].message_id))\n\n        for folder, email in email_list:\n            try:\n                self.email_imap_manager.delete_mail(email_uid=email.email_uid)\n                self.logger.info(\"Deleted email with email_uid={0}\".format(email.email_uid))\n            except Exception as e:\n                self.logger.error(\"Unable to delete email with email_uid={0} from folder={1}\".format(\n                    email.email_uid, folder))\n                self.logger.exception(e)\n\n        json_results = build_json_result_from_emails_list(email_list)\n        self.siemplify.result.add_result_json(json_results)\n        self.logger.info(\"Saved found emails as Action's JSON Results\")\n\n        message = \"Failed to find emails for deletion!\"\n        if email_list:\n            message = \"{0} email(s) were deleted successfully\".format(\n                len(email_list))\n\n        output_messages.append(message)\n        self.logger.info(message)\n        return EXECUTION_STATE_COMPLETED, True\n\n\n@output_handler\ndef main():\n    action = DeleteEmailAction()\n    action.run()\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"EmailV2","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"emails\":[{\"name\": \"aaa@aaa.com_1574937477000\", \"message_id\": \"<CAHNaB8eum4Tc=fj4U-n42zJNf6hgN6jop+KqG+WC3eGret_ZmA@mail.gmail.com>\", \"email_uid\": 14, \"subject\": \"Test 35\", \"StartTime\": 1574937477000, \"EndTime\": 1574937477000, \"Environment\": \"Undefined\", \"body\": \"Test with attachment\", \"html_body\": \"<div>Test with attachment</div>\", \"text_body\": \"Test with attachment\", \"device_product\": \"Mail\", \"vendor\": \"Mail\", \"event_type\": \"Mailbox Alert\", \"from\": \"uuu@uuu.com\", \"to\": \"hhh@hhh.com\", \"managerReceiptTime\": 1574937477000, \"original_message\": \"\", \"reply_to\": \"\", \"answer\": \"\", \"url_1\": \"https://siemplify.co\", \"url_2\": \"github.com\", \"file_1_name\": \"Test email as MSG.zip\", \"file_1_md5\": \"fc0118857de51b68c6c38c71566d9a5c\", \"file_2_name\": \"small_jpg.jpg\", \"file_2_md5\": \"2c39ce6536da5891e3766005438d3b47\", \"extra_data_field\": \"ttt\"}, {\"name\": \"aaa@aaa.com_1574937477000\", \"message_id\": \"<CAHNaB8eum4Tc=fj4U-n42zJNf6hgN6jop+KqG+WC3eGret_ZmA@mail.gmail.com>\", \"email_uid\": 14, \"subject\": \"Test 35\", \"StartTime\": 1574937477000, \"EndTime\": 1574937477000, \"Environment\": \"Undefined\", \"body\": \"Test with attachment\", \"html_body\": \"<div>Test with attachment</div>\", \"text_body\": \"Test with attachment\", \"device_product\": \"Mail\", \"vendor\": \"Mail\", \"event_type\": \"Mailbox Alert\", \"from\": \"uuu@uuu.com\", \"to\": \"hhh@hhh.com\", \"managerReceiptTime\": 1574937477000, \"original_message\": \"\", \"reply_to\": \"\", \"answer\": \"\", \"url_1\": \"https://siemplify.co\", \"url_2\": \"github.com\", \"file_1_name\": \"Test email as MSG.zip\", \"file_1_md5\": \"fc0118857de51b68c6c38c71566d9a5c\", \"file_2_name\": \"small_jpg.jpg\", \"file_2_md5\": \"2c39ce6536da5891e3766005438d3b47\", \"extra_data_field\": \"ttt\"}]}","ShowResult":true}],"Creator":"admin","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":1.0,"TimeoutSeconds":600,"IsAsync":null,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"Inbox","Description":"Mailbox folder to search email in. Parameter should also accept comma separated list of folders to check the user response in multiple folders.","Name":"Folder Name","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Filter condition, specify emails with which email ids to find. Should accept comma separated list of message ids to search for. If message id is provided, subject, sender, recipient and time filters are ignored.","Name":"Message IDs","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Filter condition, specify subject to search for emails.","Name":"Subject Filter","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Filter condition, specify who should be the sender of needed emails","Name":"Sender Filter","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Filter condition, specify who should be the recipient of needed emails","Name":"Recipient Filter","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Filter condition, specify in what time frame in days should action look for emails to delete. Note - Action works in days granularity only. 0 means it will search for mails from today.","Name":"Days Back","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"False","Description":"Filter condition, specify if action should delete all matched by criteria emails from the mailbox or delete only first match.","Name":"Delete All Matching Emails","Value":null,"Type":1,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":null,"PythonVersion":"None","SimulationData":{"Entities":[]},"SimulationDataJson":"{\"Entities\": []}"}