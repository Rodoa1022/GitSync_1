{"Name":"Search Email","Description":"Search email messages. Requires: IMAP configuration","Script":"from datetime import timedelta\nfrom EmailActions import EmailIMAPAction\nfrom EmailCommon import build_json_result_from_emails_list\nfrom SiemplifyUtils import output_handler, utc_now\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED, EXECUTION_STATE_TIMEDOUT\n\n\nclass SearchEmailAction(EmailIMAPAction):\n    \"\"\"\n    This class represents SearchEmailAction. SearchEmailAction searches target mail via IMAP\n    by configurable criteria and returns found emails as a JSON.\n    This action doesn't support any retry logic.\n    \"\"\"\n\n    SCRIPT_NAME = \"EmailV2 - Search Email\"\n\n    DEFAULT_OFFSET_IN_MINUTES = None\n\n    def __init__(self):\n        \"\"\"\n        SearchEmailAction constructor. Loads integration configuration and initializes EmailIMAPManager instance\n        \"\"\"\n        super(SearchEmailAction, self).__init__(SearchEmailAction.SCRIPT_NAME)\n\n    # noinspection PyAttributeOutsideInit\n    def load_action_configuration(self):\n        \"\"\"\n        Protected method, which should load configuration, specific to the SearchEmail Action\n        \"\"\"\n        folders_string = self._get_action_param(param_name=\"Folder Name\",\n                                                is_mandatory=True)\n        self.folders = [f.strip() for f in folders_string.split(\",\") if f.strip()] if folders_string else []\n        self.subject = self._get_action_param(param_name=\"Subject Filter\")\n        self.sender = self._get_action_param(param_name=\"Sender Filter\")\n        self.recipient = self._get_action_param(param_name=\"Recipient Filter\")\n        self.offset_in_minutes = self._get_action_param(param_name=\"Time frame (minutes)\",\n                                                        input_type=int, default_value=60)\n        self.unread_only = self._get_action_param(param_name=\"Only Unread\",\n                                                  input_type=bool,\n                                                  default_value=False)\n        self.max_emails = self._get_action_param(param_name=\"Max Emails To Return\",\n                                                 input_type=int,\n                                                 default_value=100)\n\n    # noinspection PyUnusedLocal\n    def execute_action(self, output_messages, successful_entities, failed_entities):\n        \"\"\"\n        Searches for Email with all configured criteria\n        :param output_messages: {list} Mutable list of output messages (str) to form audit trail for this action\n        :param successful_entities: {list} N/A in case of SearchEmail. List of entity.identifier's, which have been processed successfully\n        :param failed_entities: {list} N/A in case of SearchEmail. List of entity.identifier's, which have been failed during processing\n        :return: {tuple} 1st value - Status of the operation: {int} 0 - success, 1 - failed, 2 - timed out; 2nd value - Success flag: {bool} True - success, False - failure.\n        \"\"\"\n        email_list = []\n        counter = 0\n        time_filter = utc_now() - timedelta(minutes=self.offset_in_minutes)\n        for folder, email_uid in self.search_emails(\n                folders=self.folders,\n                message_ids=[],\n                time_filter=time_filter,\n                subject=self.subject,\n                sender=self.sender,\n                recipient=self.recipient,\n                only_unread=self.unread_only):\n            try:\n                if counter >= self.max_emails:\n                    self.logger.info(\"Search reached limit of {0} emails\".format(self.max_emails))\n                    break\n\n                self.logger.info(\"Fetching email with email_uid={0} in folder={1}\".format(\n                    email_uid, folder))\n                email = self.email_imap_manager.get_message_data_by_message_id(\n                        email_uid=email_uid,\n                        folder_name=folder,\n                )\n                if not email:\n                    self.logger.info(\"No emails were found for email_uid={0} in folder={1}\".format(\n                        email_uid, folder))\n                    continue\n                self.logger.info(\"Fetched email with email_uid={0} and message_id={1}\".format(\n                    email_uid, email.message_id))\n                email_list.append((folder, email))\n                counter += 1\n            except Exception as e:\n                self.logger.error(\"Unable to retrieve email with email_uid={0} from folder={1}\".format(\n                    email_uid, folder))\n                self.logger.exception(e)\n\n        json_results = build_json_result_from_emails_list(email_list)\n        self.siemplify.result.add_result_json(json_results)\n\n        message = \"Search didn't found any matching emails\"\n        if email_list:\n            message = \"Search found {0} emails based on the provided search criteria\".format(\n                len(email_list))\n\n        output_messages.append(message)\n        self.logger.info(message)\n        return EXECUTION_STATE_COMPLETED, True\n\n\n@output_handler\ndef main():\n    action = SearchEmailAction()\n    action.run()\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"EmailV2","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"emails\":[{\"name\": \"aaa@aaa.com_1574937477000\", \"message_id\": \"<CAHNaB8eum4Tc=fj4U-n42zJNf6hgN6jop+KqG+WC3eGret_ZmA@mail.gmail.com>\", \"email_uid\": 14, \"subject\": \"Test 35\", \"StartTime\": 1574937477000, \"EndTime\": 1574937477000, \"Environment\": \"Undefined\", \"body\": \"Test with attachment\", \"html_body\": \"<div>Test with attachment</div>\", \"text_body\": \"Test with attachment\", \"device_product\": \"Mail\", \"vendor\": \"Mail\", \"event_type\": \"Mailbox Alert\", \"from\": \"uuu@uuu.com\", \"to\": \"hhh@hhh.com\", \"managerReceiptTime\": 1574937477000, \"original_message\": \"\", \"reply_to\": \"\", \"answer\": \"\", \"url_1\": \"https://siemplify.co\", \"url_2\": \"github.com\", \"file_1_name\": \"Test email as MSG.zip\", \"file_1_md5\": \"fc0118857de51b68c6c38c71566d9a5c\", \"file_2_name\": \"small_jpg.jpg\", \"file_2_md5\": \"2c39ce6536da5891e3766005438d3b47\", \"extra_data_field\": \"ttt\"}, {\"name\": \"aaa@aaa.com_1574937477000\", \"message_id\": \"<CAHNaB8eum4Tc=fj4U-n42zJNf6hgN6jop+KqG+WC3eGret_ZmA@mail.gmail.com>\", \"email_uid\": 14, \"subject\": \"Test 35\", \"StartTime\": 1574937477000, \"EndTime\": 1574937477000, \"Environment\": \"Undefined\", \"body\": \"Test with attachment\", \"html_body\": \"<div>Test with attachment</div>\", \"text_body\": \"Test with attachment\", \"device_product\": \"Mail\", \"vendor\": \"Mail\", \"event_type\": \"Mailbox Alert\", \"from\": \"uuu@uuu.com\", \"to\": \"hhh@hhh.com\", \"managerReceiptTime\": 1574937477000, \"original_message\": \"\", \"reply_to\": \"\", \"answer\": \"\", \"url_1\": \"https://siemplify.co\", \"url_2\": \"github.com\", \"file_1_name\": \"Test email as MSG.zip\", \"file_1_md5\": \"fc0118857de51b68c6c38c71566d9a5c\", \"file_2_name\": \"small_jpg.jpg\", \"file_2_md5\": \"2c39ce6536da5891e3766005438d3b47\", \"extra_data_field\": \"ttt\"}]}","ShowResult":true}],"Creator":"admin","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":1.0,"TimeoutSeconds":600,"IsAsync":null,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"Inbox","Description":"Mailbox folder to search email in. Parameter should also accept comma separated list of folders to check the user response in multiple folders.","Name":"Folder Name","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Filter condition, specify what subject to search for emails","Name":"Subject Filter","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Filter condition, specify who should be the sender of needed emails","Name":"Sender Filter","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Filter condition, specify who should be the recipient of needed emails","Name":"Recipient Filter","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"60","Description":"Filter condition, specify in what time frame in minutes should search look for emails","Name":"Time frame (minutes)","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"False","Description":"Filter condition, specify if search should look only for unread emails","Name":"Only Unread","Value":null,"Type":1,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"100","Description":"Return max X emails as an action result.","Name":"Max Emails To Return","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":null,"PythonVersion":"None","SimulationData":{"Entities":[]},"SimulationDataJson":"{\"Entities\": []}"}