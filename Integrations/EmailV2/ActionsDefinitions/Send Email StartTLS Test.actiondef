{"Name":"Send Email StartTLS Test","Description":"Send email message. Requires: SMTP configuration","Script":"from EmailSMTPManager_StartTLS import EmailSMTPManager\nfrom EmailActions import BaseEmailAction\nfrom SiemplifyUtils import output_handler, utc_now\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED, EXECUTION_STATE_TIMEDOUT\n\n\nclass SendEmailAction(BaseEmailAction):\n    \"\"\"\n    This class should be used for execution of flow related to SendEmail action.\n    SendEmail should simply send an email through selected SMTP server.\n    This action doesn't support any retry logic.\n    \"\"\"\n\n    SCRIPT_NAME = \"EmailV2 - Send Email\"\n\n    def __init__(self):\n        \"\"\"\n        SendEmailAction constructor. Loads integration configuration and initializes EmailManager instance\n        \"\"\"\n\n        super(SendEmailAction, self).__init__(SendEmailAction.SCRIPT_NAME)\n        error_message = \"SMTP configuration is needed to execute action. Please configure SMTP on \" \\\n                        \"integration configuration page in Marketplace.\"\n        self.validate_configuration(self.smtp_host, self.smtp_port, error_message)\n\n        # Instantiate EmailSMTPManager\n        self.email_smtp_manager = EmailSMTPManager(self.from_address)\n\n        # And Login to it\n        self.email_smtp_manager.login_smtp(\n            host=self.smtp_host,\n            port=self.smtp_port,\n            username=self.username,\n            password=self.password,\n            use_ssl=self.smtp_use_ssl,\n            use_auth=self.smtp_use_auth)\n\n    # noinspection PyAttributeOutsideInit\n    def load_action_configuration(self):\n        \"\"\"\n        Protected method, which should load configuration, specific to the SendEmail Action\n        \"\"\"\n        self.send_to = self._get_action_param(param_name=\"Recipients\",\n                                              is_mandatory=True)\n        self.cc = self._get_action_param(param_name=\"CC\")\n        self.bcc = self._get_action_param(param_name=\"BCC\")\n        self.subject = self._get_action_param(param_name=\"Subject\",\n                                              is_mandatory=True)\n        self.body = self._get_action_param(param_name=\"Content\",\n                                           is_mandatory=True)\n        self.return_msg_id = self._get_action_param(param_name=\"Return message id for the sent email\",\n                                                    input_type=bool,\n                                                    default_value=False)\n        attachment_paths_list = self._get_action_param(param_name=\"Attachments Paths\")\n        if attachment_paths_list:\n            self.attachment_paths = [a.strip() for a in attachment_paths_list.split(\",\") if a.strip()]\n        else:\n            self.attachment_paths = []\n\n    # noinspection PyUnusedLocal\n    def execute_action(self, output_messages, successful_entities, failed_entities):\n        \"\"\"\n        Sends email with all required attachments\n        :param output_messages: {list} Mutable list of output messages (str) to form audit trail for this action\n        :param successful_entities: {list} N/A in case of SendEmail. List of entity.identifier's, which have been processed successfully\n        :param failed_entities: {list} N/A in case of SendEmail. List of entity.identifier's, which have been failed during processing\n        :return: {tuple} 1st value - Status of the operation: {int} 0 - success, 1 - failed, 2 - timed out; 2nd value - Success flag: {bool} True - success, False - failure.\n        \"\"\"\n        # Create a dict with all required attachments to the email\n        attachments_dict = self.load_attachments_to_dict()\n\n        try:\n            # Send an email and save it's message_id\n            self.logger.info(\"Sending email\")\n            msg_id = self.email_smtp_manager.send_mail_html_embedded_photos(\n                to_addresses=self.send_to,\n                subject=self.subject,\n                html_body=self.body,\n                cc=self.cc,\n                bcc=self.bcc,\n                display_sender_name=self.display_sender_name,\n                attachments=attachments_dict,\n            )\n        except Exception as e:\n            message = \"Failed to send email!\"\n            self.logger.error(message)\n            self.logger.exception(e)\n            output_messages.append(message)\n            return EXECUTION_STATE_FAILED, False\n\n        message = \"Email has been send successfully\"\n        # Save result JSON, if required\n        if self.return_msg_id:\n            self.logger.info(\"Saving result JSON\")\n            json_result = {\n                \"message_id\": msg_id,\n                \"date\": utc_now(),\n                \"recipients\": self.send_to\n            }\n            self.siemplify.result.add_result_json(json_result)\n            message = \"Mail sent successfully. Mail message id is: {0}\".format(msg_id)\n\n        output_messages.append(message)\n        self.logger.info(message)\n        return EXECUTION_STATE_COMPLETED, True\n\n    def load_attachments_to_dict(self):\n        attachments_dict = {}\n        self.logger.info(\"Reading attachments from disk\")\n        for attachment_path in self.attachment_paths:\n            try:\n                with open(attachment_path, \"rb\") as f:\n                    attachments_dict[attachment_path] = f.read()\n            except Exception as e:\n                self.logger.error(\"Unable to read attachment {} from disk\".format(attachment_path))\n                self.logger.exception(e)\n        return attachments_dict\n\n\n@output_handler\ndef main():\n    action = SendEmailAction()\n    action.run()\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"EmailV2","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"date\": \"2019-11-18 08:02:57.984000+00:00\", \"message_id\": \"<157406417676.181148.9624253160139989862@C3431448806>\", \"recipients\": \"aaa@aaa.com, bbb@bbb.com\"}","ShowResult":true}],"Creator":"19b97b4b-60b9-409f-93e6-d2fe0d79e3df","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":4.0,"TimeoutSeconds":600,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"","Description":"Arbitrary comma separated list of email addresses for the email recipients","Name":"Recipients","Value":"","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Arbitrary comma separated list of email addresses to be put in the CC field of email","Name":"CC","Value":"","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"BCC email address. Multiple addresses can be separated by commas","Name":"BCC","Value":"","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"","Description":"The email subject part","Name":"Subject","Value":"","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"","Description":"The email body part, if Email HTML Template is set, action should support definition of body of the email with provided HTML template.","Name":"Content","Value":"","Type":10,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"If selected, action returns the message id for the sent email in JSON technical result. This message id when can be used for the 'Wait for Email from user' action to process user response","Name":"Return message id for the sent email","Value":"","Type":1,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Comma separated list of attachments file paths stored on the server for addition to the email.","Name":"Attachments Paths","Value":"","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":null,"PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}