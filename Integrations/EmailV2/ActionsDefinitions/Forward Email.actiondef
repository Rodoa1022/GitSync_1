{"Name":"Forward Email","Description":"Forward email including previous messages. Message_id of the email to forward needs to be provided as an action input parameter.","Script":"from EmailActions import EmailIMAPAction\nfrom EmailCommon import load_attachments_to_dict\nfrom EmailDataModels import EmailModel\nfrom EmailSMTPManager import EmailSMTPManager, HUMAN_READABLE_EMAIL_DATE_FORMAT, ESCAPED_HTML_BRACKETS_WRAP\n\nfrom ScriptResult import EXECUTION_STATE_COMPLETED\nfrom SiemplifyUtils import output_handler, utc_now\n\n\nclass ForwardEmailAction(EmailIMAPAction):\n    \"\"\"\n    This class should be used for execution of flow related to ForwardEmail action.\n    ForwardEmail should fetch the forwarded email, attach it's body and attachments to a newly created email and send it through selected\n    SMTP server.\n    This action doesn't support any retry logic.\n    \"\"\"\n\n    SCRIPT_NAME = \"EmailV2 - Forward Email\"\n    FORWARDED_EMAIL_HTML_TEMPLATE = \"\"\"        \n        <br>\n        <br>\n        ---------- Forwarded message ----------<br>\n        From: {sender}<br>\n        Date: {email_date}<br>\n        Subject: {subject}<br>\n        To: {recipients}<br>\n        <br>\n        <br>\n        {html_content}\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        ForwardEmailAction constructor. Loads integration configuration and initializes EmailManager instance\n        \"\"\"\n\n        super(ForwardEmailAction, self).__init__(ForwardEmailAction.SCRIPT_NAME)\n        error_message = \"SMTP configuration is needed to execute action. Please configure SMTP on \" \\\n                        \"integration configuration page in Marketplace.\"\n        self.validate_configuration(self.smtp_host, self.smtp_port, error_message)\n\n        # Instantiate EmailSMTPManager\n        self.email_smtp_manager = EmailSMTPManager(self.from_address)\n\n        # And Login to it\n        self.email_smtp_manager.login_smtp(\n            host=self.smtp_host,\n            port=self.smtp_port,\n            username=self.username,\n            password=self.password,\n            use_ssl=self.smtp_use_ssl,\n            use_auth=self.smtp_use_auth)\n\n    # noinspection PyAttributeOutsideInit\n    def load_action_configuration(self):\n        \"\"\"\n        Protected method, which should load configuration, specific to the SendEmail Action\n        \"\"\"\n        self.send_to = self._get_action_param(param_name=\"Recipients\", is_mandatory=True, print_value=True)\n        self.cc = self._get_action_param(param_name=\"CC\", is_mandatory=False, print_value=True)\n        self.bcc = self._get_action_param(param_name=\"BCC\", is_mandatory=False, print_value=True)\n        self.subject = self._get_action_param(param_name=\"Subject\", is_mandatory=True, print_value=True)\n        self.body = self._get_action_param(param_name=\"Content\", is_mandatory=False, default_value='')\n        folders_string = self._get_action_param(param_name=\"Folder Name\", default_value=\"Inbox\")\n        self.folders = [f.strip() for f in folders_string.split(\",\") if f.strip()] if folders_string else []\n        self.return_msg_id = self._get_action_param(param_name=\"Return message id for the forwarded email\", input_type=bool,\n                                                    default_value=False, print_value=True)\n        self.forward_message_id = self._get_action_param(param_name=\"Message ID of email to forward\", is_mandatory=True, print_value=True)\n        attachment_paths_list = self._get_action_param(param_name=\"Attachments Paths\", is_mandatory=False, print_value=True)\n        if attachment_paths_list:\n            self.attachment_paths = [a.strip() for a in attachment_paths_list.split(\",\") if a.strip()]\n        else:\n            self.attachment_paths = []\n\n    def build_forward_email_message(self, new_body: str, email_to_forward: EmailModel) -> str:\n        \"\"\"\n        Builds html template of forwarded email content\n        :return: {str} HTML template of the forwarded message\n        \"\"\"\n        forwarded_email_html_content = self.FORWARDED_EMAIL_HTML_TEMPLATE.format(\n            sender=ESCAPED_HTML_BRACKETS_WRAP.format(email_to_forward.original_sender),\n            email_date=email_to_forward.email_date_aware.strftime(HUMAN_READABLE_EMAIL_DATE_FORMAT),\n            subject=email_to_forward.subject,\n            recipients=', '.join(ESCAPED_HTML_BRACKETS_WRAP.format(recipient) for recipient in email_to_forward.recipients),\n            html_content=email_to_forward.html_body\n        )\n        return f\"\"\"{new_body}{forwarded_email_html_content}\"\"\"\n\n    # noinspection PyUnusedLocal\n    def execute_action(self, output_messages, successful_entities, failed_entities):\n        \"\"\"\n        Forward email with all required attachments\n        :param output_messages: {list} Mutable list of output messages (str) to form audit trail for this action\n        :param successful_entities: {list} N/A in case of ForwardEmail. List of entity.identifier's, which have been processed successfully\n        :param failed_entities: {list} N/A in case of ForwardEmail. List of entity.identifier's, which have been failed during processing\n        :return: {tuple} 1st value - Status of the operation: {int} 0 - success, 1 - failed, 2 - timed out; 2nd value - Success flag: {bool} True - success, False - failure.\n        \"\"\"\n        # Create a dict with all required attachments to the email\n        attachments_dict = load_attachments_to_dict(siemplify_logger=self.logger, attachment_paths=self.attachment_paths)\n        email_to_forward_found = False\n\n        # Forward first found email\n        for folder, email_uid in self.search_emails(folders=self.folders, message_ids=[self.forward_message_id]):\n            try:\n                self.logger.info(\"Fetching email message data with email_uid={0} in folder={1}\".format(\n                    email_uid, folder))\n                email_to_forward = self.email_imap_manager.get_message_data_by_message_id(\n                    email_uid=email_uid,\n                    folder_name=folder,\n                    include_raw_eml=True\n                )\n                if not email_to_forward:\n                    self.logger.info(\"No emails were found for email_uid={0} in folder={1}\".format(\n                        email_uid, folder))\n                    continue\n                email_to_forward_found = True\n                self.logger.info(\"Fetched email with email_uid={0} and message_id={1}\".format(email_uid, email_to_forward.message_id))\n                try:\n                    # Include original attachments in the forwarded email\n                    if email_to_forward.attachments:\n                        self.logger.info(f\"Found {len(email_to_forward.attachments)} attachments in forwarded email\")\n                        for attachment in email_to_forward.attachments:\n                            if attachment.file_name and attachment.file_contents:\n                                self.logger.info(f\"Adding attachment {attachment.file_name} from forwarded email\")\n                                # attachments_dict contains absolute file paths, email attachment contain only base names so no\n                                # conflicts should occur\n                                attachments_dict.update(attachment.to_dict())\n                            else:\n                                self.logger.error(f\"Attachment of forwarded email failed to be loaded\")\n\n                    self.logger.info(\"Forwarding email..\")\n\n                    msg_id = self.email_smtp_manager.send_mail_html_embedded_photos(\n                        to_addresses=self.send_to,\n                        subject=self.subject,\n                        html_body=self.build_forward_email_message(self.body, email_to_forward),\n                        cc=self.cc,\n                        bcc=self.bcc,\n                        display_sender_name=self.display_sender_name,\n                        attachments=attachments_dict\n                    )\n\n                    if self.return_msg_id:\n                        message = \"Mail forwarded successfully. Mail message id is: {}\".format(msg_id)\n                        self.logger.info(\"Saving result JSON\")\n                        json_result = {\n                            \"message_id\": msg_id,\n                            \"date\": utc_now(),\n                            \"recipients\": self.send_to\n                        }\n                        self.siemplify.result.add_result_json(json_result)\n                    else:\n                        message = \"Mail forwarded successfully.\"\n\n                    output_messages.append(message)\n                    self.logger.info(message)\n                    return EXECUTION_STATE_COMPLETED, True\n\n                except Exception as error:\n                    message = \"Failed to forward the email! Error is: {}\".format(error)\n                    self.logger.error(message)\n                    self.logger.exception(error)\n                    output_messages.append(message)\n\n            except Exception as error:\n                message = \"Failed to forward the email! Error is: {}\".format(error)\n                self.logger.error(\"Unable to retrieve email with email_uid={0} from folder={1}\".format(\n                    email_uid, folder))\n                self.logger.exception(error)\n\n        if not email_to_forward_found:\n            message = \"Failed to find email to forward!\"\n            output_messages.append(message)\n            self.logger.info(message)\n        return EXECUTION_STATE_COMPLETED, False\n\n\n@output_handler\ndef main():\n    action = ForwardEmailAction()\n    action.run()\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"EmailV2","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"date\": \"2019-11-18 08:02:57.984000+00:00\", \"message_id\": \"<157406417676.181148.9624253160139989862@C3431448806>\", \"recipients\": \"aaa@aaa.com, bbb@bbb.com\"}","ShowResult":true}],"Creator":"admin","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":1.0,"TimeoutSeconds":600,"IsAsync":null,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"Inbox","Description":"Mailbox folder to search email in. Parameter should also accept comma separated list of folders. Note that you can set mail-specific folders, for example \"[Gmail]/All Mail\"  to search in all of the folders of Gmail mailbox. Additionally, folder name should match exactly the IMAP folder. If folder contains spaces, folder must be wrapped in double quotes.","Name":"Folder Name","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"","Description":"message_id value of the email to forward.","Name":"Message ID of email to forward","Value":"","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"","Description":"Arbitrary comma separated list of email addresses for the email recipients.","Name":"Recipients","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Arbitrary comma separated list of email addresses to be put in the CC field of email.","Name":"CC","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"BCC email address. Multiple addresses can be separated by commas.","Name":"BCC","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"","Description":"The email subject part.","Name":"Subject","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"The email body part, if Email HTML Template is set, action should support definition of body of the email with provided HTML template.","Name":"Content","Value":"","Type":10,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"If selected, action returns the message id for the sent email in JSON technical result.","Name":"Return message id for the forwarded email","Value":null,"Type":1,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Comma separated list of attachments file paths stored on the server for addition to the email.","Name":"Attachments Paths","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":null,"PythonVersion":"None","SimulationData":{"Entities":[]},"SimulationDataJson":"{\"Entities\": []}"}