{"Name":"Save Email Attachments To Case","Description":"Save email attachments from email stored in monitored mailbox to the Case Wall. Requires: IMAP configuration","Script":"from EmailActions import EmailIMAPAction\nfrom EmailCommon import build_json_result_from_emails_list, save_attachments_to_case\nfrom EmailFileManager import save_attachments_locally\nfrom SiemplifyUtils import output_handler, utc_now\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED, EXECUTION_STATE_TIMEDOUT\n\n\ndef filter_attachments_by_name(attachments_list, attachment_name):\n    # type: (list, str) -> list\n    \"\"\"\n    Filters attachments list by a specific attachment name\n    :param attachments_list: {list} List of EmailAttachmentModel objects\n    :param attachment_name: {str} Name of the attachment file name to look for\n    :return: {list} List of filtered EmailAttachmentModel objects\n    \"\"\"\n    new_attachments = []\n    for attachment in attachments_list:\n        if attachment.file_name == attachment_name:\n            new_attachments.append(attachment)\n    return new_attachments\n\n\nclass SaveEmailAttachmentsToCaseAction(EmailIMAPAction):\n    \"\"\"\n    Searches for emails in the mailbox, then saves attachments to the case\n    for emails matching the search criteria.\n    All Email mailbox manipulations are done via IMAP.\n    \"\"\"\n\n    SCRIPT_NAME = \"EmailV2 - Save Email Attachments To Case\"\n\n    def __init__(self):\n        \"\"\"\n        Overriding of the constructor\n        \"\"\"\n        super(SaveEmailAttachmentsToCaseAction, self).__init__(SaveEmailAttachmentsToCaseAction.SCRIPT_NAME)\n\n    # noinspection PyAttributeOutsideInit\n    def load_action_configuration(self):\n        \"\"\"\n        Overriding action configuration loading\n        \"\"\"\n        folders_string = self._get_action_param(param_name=\"Folder Name\",\n                                                is_mandatory=True)\n        self.folders = [f.strip() for f in folders_string.split(\",\") if f.strip()] if folders_string else []\n\n        self.message_id = self._get_action_param(param_name=\"Message ID\")\n        self.attachment_name = self._get_action_param(param_name=\"Attachment To Save\")\n\n    # noinspection PyUnusedLocal\n    def execute_action(self, output_messages, successful_entities, failed_entities):\n        \"\"\"\n        Override of execution step. Searches for emails to download their attachments and attaches them to the case.\n        :param output_messages: {list} Mutable list of output messages (str) to form audit trail for this action\n        :param successful_entities: {list} N/A in case of SearchEmail. List of entity.identifier's, which have been processed successfully\n        :param failed_entities: {list} N/A in case of SearchEmail. List of entity.identifier's, which have been failed during processing\n        :return: {tuple} 1st value - Status of the operation: {int} 0 - success, 1 - failed, 2 - timed out; 2nd value - Success flag: {bool} True - success, False - failure.\n        \"\"\"\n        email_list = []\n        attachments = {}\n        message_ids = [self.message_id] if self.message_id else []\n        for folder, email_uid in self.search_emails(folders=self.folders, message_ids=message_ids):\n            try:\n                self.logger.info(\"Fetching email with email_uid={0} in folder={1}\".format(\n                    email_uid, folder))\n                # We retrieve email contents and delete it at the same time\n                email = self.email_imap_manager.get_message_data_by_message_id(\n                    email_uid=email_uid,\n                    folder_name=folder,\n                    mark_as_read=True)\n                if not email:\n                    self.logger.info(\"No emails were found for email_uid={0} in folder={1}\".format(\n                        email_uid, folder))\n                    continue\n                self.logger.info(\"Fetched email successfully with email_uid={0} and message_id={1}\".format(\n                    email_uid, email.message_id))\n\n                email_list.append((folder, email))\n                mail_attachments = email.attachments\n                if self.attachment_name:\n                    self.logger.info(\"Filtering attachments by name: {}\".format(self.attachment_name))\n                    mail_attachments = filter_attachments_by_name(email.attachments, self.attachment_name)\n\n                self.logger.info(\"Saving attachments locally for email_uid={}\".format(email_uid))\n                attachments_paths = save_attachments_locally(self.siemplify.run_folder, mail_attachments)\n\n                attachments.update({email_uid: attachments_paths})\n            except Exception as e:\n                self.logger.error(\"Unable to fetch attachments for email_uid={0} from folder={1}\".format(\n                    email_uid, folder))\n                self.logger.exception(e)\n\n        num_emails, num_files = save_attachments_to_case(self.siemplify, attachments)\n        self.logger.info(\"Saved all attachments to the case\")\n\n        json_results = build_json_result_from_emails_list(email_list)\n        self.siemplify.result.add_result_json(json_results)\n\n        message = \"No attachments have been found!\"\n        if attachments:\n            message = \"Saved {0} files from {1} emails\".format(num_files, num_emails)\n\n        output_messages.append(message)\n        self.logger.info(message)\n        return EXECUTION_STATE_COMPLETED, True\n\n\n@output_handler\ndef main():\n    action = SaveEmailAttachmentsToCaseAction()\n    action.run()\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"EmailV2","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"emails\":[{\"name\": \"aaa@aaa.com_1574937477000\", \"message_id\": \"<CAHNaB8eum4Tc=fj4U-n42zJNf6hgN6jop+KqG+WC3eGret_ZmA@mail.gmail.com>\", \"email_uid\": 14, \"subject\": \"Test 35\", \"StartTime\": 1574937477000, \"EndTime\": 1574937477000, \"Environment\": \"Undefined\", \"body\": \"Test with attachment\", \"html_body\": \"<div>Test with attachment</div>\", \"text_body\": \"Test with attachment\", \"device_product\": \"Mail\", \"vendor\": \"Mail\", \"event_type\": \"Mailbox Alert\", \"from\": \"uuu@uuu.com\", \"to\": \"hhh@hhh.com\", \"managerReceiptTime\": 1574937477000, \"original_message\": \"\", \"reply_to\": \"\", \"answer\": \"\", \"url_1\": \"https://siemplify.co\", \"url_2\": \"github.com\", \"file_1_name\": \"Test email as MSG.zip\", \"file_1_md5\": \"fc0118857de51b68c6c38c71566d9a5c\", \"file_2_name\": \"small_jpg.jpg\", \"file_2_md5\": \"2c39ce6536da5891e3766005438d3b47\", \"extra_data_field\": \"ttt\"}, {\"name\": \"aaa@aaa.com_1574937477000\", \"message_id\": \"<CAHNaB8eum4Tc=fj4U-n42zJNf6hgN6jop+KqG+WC3eGret_ZmA@mail.gmail.com>\", \"email_uid\": 14, \"subject\": \"Test 35\", \"StartTime\": 1574937477000, \"EndTime\": 1574937477000, \"Environment\": \"Undefined\", \"body\": \"Test with attachment\", \"html_body\": \"<div>Test with attachment</div>\", \"text_body\": \"Test with attachment\", \"device_product\": \"Mail\", \"vendor\": \"Mail\", \"event_type\": \"Mailbox Alert\", \"from\": \"uuu@uuu.com\", \"to\": \"hhh@hhh.com\", \"managerReceiptTime\": 1574937477000, \"original_message\": \"\", \"reply_to\": \"\", \"answer\": \"\", \"url_1\": \"https://siemplify.co\", \"url_2\": \"github.com\", \"file_1_name\": \"Test email as MSG.zip\", \"file_1_md5\": \"fc0118857de51b68c6c38c71566d9a5c\", \"file_2_name\": \"small_jpg.jpg\", \"file_2_md5\": \"2c39ce6536da5891e3766005438d3b47\", \"extra_data_field\": \"ttt\"}]}","ShowResult":true}],"Creator":"admin","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":1.0,"TimeoutSeconds":600,"IsAsync":null,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"Inbox","Description":"Mailbox folder to search email in. Parameter should also accept comma separated list of folders to check the user response in multiple folders.","Name":"Folder Name","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"Message id to find an email to download attachments from.","Name":"Message ID","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"","Description":"If parameter is not specified - save all email attachments to the case wall. If parameter specified - save only matching attachment to the case wall.","Name":"Attachment To Save","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":null,"PythonVersion":"None","SimulationData":{"Entities":[]},"SimulationDataJson":"{\"Entities\": []}"}